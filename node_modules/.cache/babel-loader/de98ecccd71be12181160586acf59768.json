{"ast":null,"code":"var _jsxFileName = \"/home/akanksha/todoapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n  const [completedTodos, setCompletedTodos] = useState([]);\n  const [todo, setTodo] = useState(\"\");\n  const [todoEditing, setTodoEditing] = useState(null);\n  const [editingText, setEditingText] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState('');\n  const [showComplete, setShowComplete] = useState([]);\n  var submit = false; // for todos\n\n  useEffect(() => {\n    const json = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(json);\n\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []);\n  useEffect(() => {\n    const json = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", json);\n  }, [todos]); // for completed todos\n\n  useEffect(() => {\n    const json = localStorage.getItem(\"completedTodos\");\n    const loadedTodos = JSON.parse(json);\n\n    if (loadedTodos) {\n      setCompletedTodos(loadedTodos);\n    }\n  }, []);\n  useEffect(() => {\n    const json = JSON.stringify(completedTodos);\n    localStorage.setItem(\"completedTodos\", json);\n  }, [completedTodos]);\n\n  const checkItem = () => {\n    if (todo.replace(/ /g, '').length < 5) {\n      setErrorMessage('Item must contain atleast 5 letters');\n    } else {\n      setErrorMessage('');\n      submit = true;\n    }\n  };\n\n  const handleSubmit = () => {\n    if (submit) {\n      const newTodo = {\n        id: new Date().getTime(),\n        text: todo,\n        completed: false,\n        addList: false\n      };\n      setTodos([...todos].concat(newTodo));\n      setTodo(\"\");\n      setErrorMessage('');\n    }\n  };\n\n  function deleteTodo(id) {\n    let updatedTodos = [...todos].filter(todo => todo.id !== id);\n    setTodos(updatedTodos);\n  }\n\n  function toggleComplete(id) {\n    let updatedTodos = [...todos].map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n\n        if (todo.completed) {\n          setCompletedTodos([...completedTodos].concat(todo));\n        } else {\n          let updatedItems = [...completedTodos].filter(todo => todo.id !== id);\n          setCompletedTodos(updatedItems);\n        }\n      }\n\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }\n\n  const removeCompleted = () => {\n    const updatedTodos = todos.filter(item => {\n      return !item.completed === true;\n    });\n    setTodos(updatedTodos);\n    let updatedList = [...completedTodos].filter(todo => todo.completed === true);\n    setShowComplete(updatedList);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"todo-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => {\n          setTodo(e.target.value);\n          checkItem();\n        },\n        onKeyPress: e => {\n          if (e.key === 'Enter') {\n            handleSubmit();\n            checkItem();\n          }\n        },\n        value: todo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: () => {\n          checkItem();\n          handleSubmit();\n        },\n        children: \"Add Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontWeight: 'bold',\n        color: 'red',\n        fontSize: '1.5rem'\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), todos.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-text\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: \"completed\",\n            checked: todo.completed,\n            onChange: () => {\n              toggleComplete(todo.id); // disableButton()\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), todo.id === todoEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: e => setEditingText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textDecoration: todo.completed ? \"line-through\" : \"\",\n            color: todo.completed ? \"red\" : \"black\"\n          },\n          children: todo.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteTodo(todo.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, todo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        removeCompleted();\n      },\n      children: \"Remove Completed Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Completed Tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), showComplete.map(showComplete => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-text\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: showComplete.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)\n      }, showComplete.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"DDGhVv8aV7Z2cZ99+K1RCIz4UoA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/akanksha/todoapp/src/App.js"],"names":["React","useState","useEffect","App","todos","setTodos","completedTodos","setCompletedTodos","todo","setTodo","todoEditing","setTodoEditing","editingText","setEditingText","errorMessage","setErrorMessage","showComplete","setShowComplete","submit","json","localStorage","getItem","loadedTodos","JSON","parse","stringify","setItem","checkItem","replace","length","handleSubmit","newTodo","id","Date","getTime","text","completed","addList","concat","deleteTodo","updatedTodos","filter","toggleComplete","map","updatedItems","removeCompleted","item","updatedList","e","target","value","key","fontWeight","color","fontSize","textDecoration"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [completedTodos, setCompletedTodos] = useState([]);\n  const [todo, setTodo] = useState(\"\");\n  const [todoEditing, setTodoEditing] = useState(null);\n  const [editingText, setEditingText] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState('');\n  const [showComplete, setShowComplete] = useState([]);\n  var submit=false;\n\n// for todos\n  useEffect(() => {\n    const json = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(json);\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    const json = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", json);\n  }, [todos]);\n\n// for completed todos\n  useEffect(() => {\n    const json = localStorage.getItem(\"completedTodos\");\n    const loadedTodos = JSON.parse(json);\n    if (loadedTodos) {\n      setCompletedTodos(loadedTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    const json = JSON.stringify(completedTodos);\n    localStorage.setItem(\"completedTodos\", json);\n  }, [completedTodos]);\n\n  const checkItem = () => {\n    if (todo.replace(/ /g, '').length<5) {\n      setErrorMessage('Item must contain atleast 5 letters');\n    }\n    else{\n      setErrorMessage('');\n      submit=true;\n    }\n  };\n\n  const handleSubmit = () => {\n    if (submit){\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo,\n      completed: false,\n      addList: false,\n    };\n\n    setTodos([...todos].concat(newTodo));\n    setTodo(\"\");\n    setErrorMessage('');\n    }\n  }\n\n  function deleteTodo(id) {\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n  }\n\n  function toggleComplete(id) {\n    let updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n        if(todo.completed ){\n          setCompletedTodos([...completedTodos].concat(todo));\n        }\n        else {\n            let updatedItems = [...completedTodos].filter((todo) => \n              todo.id !== id);\n           setCompletedTodos(updatedItems);\n        }\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }\n\nconst removeCompleted = () => {\n    const updatedTodos = todos.filter((item) => {\n      return !item.completed === true;\n      });\n      setTodos(updatedTodos);\n\n    let updatedList = [...completedTodos].filter((todo) => \n      todo.completed ===true);\n\n      setShowComplete(updatedList);\n  };\n\n  return (\n    <div id=\"todo-list\">\n      <h1>Todo List</h1>\n      {/*todo-submit*/}\n      <div className=\"form\">\n        <input\n          type=\"text\"\n          onChange={(e) => {setTodo(e.target.value)\n            ;checkItem()}}\n          onKeyPress={e => {\n            if (e.key === 'Enter') {\n              handleSubmit();\n              checkItem();}}}\n          value={todo}\n        />\n        <button type=\"submit\" \n        onClick={() => {checkItem();handleSubmit()}}>Add Todo</button>\n      </div>\n        <p style={{\n          fontWeight: 'bold',\n          color: 'red',\n          fontSize: '1.5rem',\n        }}>{errorMessage}</p>\n\n      {/*todo-list*/}\n      {todos.map((todo) => (\n        <div key={todo.id} className=\"todo\">\n          <div className=\"todo-text\">\n          <p >\n            <input\n              type=\"checkbox\"\n              id=\"completed\"\n              checked={todo.completed}\n              onChange={() => {toggleComplete(todo.id);\n                // disableButton()\n              }}\n            />\n          </p>\n            {todo.id === todoEditing ? (\n              <input\n                type=\"text\"\n                onChange={(e) => setEditingText(e.target.value)}\n              />\n            ) : (\n              <div style={{textDecoration : todo.completed ? \"line-through\" : \"\"\n              ,color : todo.completed ? \"red\":\"black\"}} >{todo.text}</div>\n            )}\n          </div>\n          <div className=\"todo-actions\">\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </div>\n        </div>\n      ))}\n\n      {/*remove-completed-tasks*/}\n      <button onClick={() => {removeCompleted()}}>\n              Remove Completed Tasks\n      </button>\n\n      <div>\n        <div >\n          <h1>Completed Tasks</h1>\n        </div>\n       \n        {showComplete.map((showComplete) => ( \n        <div key={showComplete.id} >\n            <div className=\"todo-text\">\n              <p >{showComplete.text}</p>\n            </div>\n        </div>\n      ))}\n      </div>\n\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}